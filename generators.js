// Les fonctions generateFPL, generateKML, generateCRD sont ici.
// Elles dépendent des fonctions dans geoUtils.js

function generateFPL(name, waypoints) {
    const createdTime = new Date().toISOString();
    const waypointTableXML = waypoints.map(wp => `\n    <waypoint>\n        <identifier>${wp.identifier}</identifier>\n        <type>${wp.type}</type>\n        <lat>${wp.lat}</lat>\n        <lon>${wp.lon}</lon>\n        <altitude-ft>${wp.altFeet > 0 ? wp.altFeet : ''}</altitude-ft>\n    </waypoint>`).join('');
    const routePointsXML = waypoints.map(wp => `\n    <route-point>\n        <waypoint-identifier>${wp.identifier}</waypoint-identifier>\n        <waypoint-type>${wp.type}</waypoint-type>\n    </route-point>`).join('');
    return `<?xml version="1.0" encoding="utf-8"?>\n<flight-plan xmlns="http://www8.garmin.com/xmlschemas/FlightPlan/v1">\n<created>${createdTime}</created>\n<waypoint-table>${waypointTableXML}\n</waypoint-table>\n<route>\n    <route-name>${name}</route-name>\n    <flight-plan-index>1</flight-plan-index>${routePointsXML}\n</route>\n</flight-plan>`;
}

function generateKML(name, waypoints) {
    const updatedWaypoints = waypoints.map(wp => ({ ...wp, altMeters: wp.altFeet * FEET_TO_METERS }));
    const placemarksKML = updatedWaypoints.map(wp => {
        let desc = `Altitude: <strong>${wp.altFeet > 0 ? wp.altFeet.toLocaleString('fr-FR') + ' ft' : 'Non spécifiée'}</strong>`;
        if (wp.comment) {
            const safeComment = wp.comment.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>').replace(/\n/g, '<br>');
            desc += `<br><hr style="margin: 5px 0;"><strong>Commentaire:</strong><br>${safeComment}`;
        }
        return `<Placemark><name>${wp.identifier}</name><styleUrl>#waypointStyle</styleUrl><description><![CDATA[${desc}]]></description><Point><altitudeMode>absolute</altitudeMode><coordinates>${wp.lon},${wp.lat},${wp.altMeters}</coordinates></Point></Placemark>`;
    }).join('');
    const coordsStr = updatedWaypoints.map(wp => `${wp.lon},${wp.lat},${wp.altMeters}`).join(' ');
    return `<?xml version="1.0" encoding="UTF-8"?><kml xmlns="http://www.opengis.net/kml/2.2"><Document><name>${name}</name><Style id="flightPathStyle"><LineStyle><color>ff00ffff</color><width>3</width></LineStyle></Style><Style id="waypointStyle"><IconStyle><Icon><href>http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href></Icon><hotSpot x="20" y="2" xunits="pixels" yunits="pixels"/></IconStyle><LabelStyle><scale>0.8</scale></LabelStyle></Style><Folder><name>Trace du vol</name><Placemark><name>${name}</name><styleUrl>#flightPathStyle</styleUrl><LineString><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><coordinates>${coordsStr}</coordinates></LineString></Placemark></Folder><Folder><name>Waypoints</name>${placemarksKML}</Folder></Document></kml>`;
}

function generateCRD(name, waypoints) {
    // Cette fonction est très longue, on la copie/colle telle quelle
    const pointListXML = waypoints.map((wp, index) => { const crdCoords = decimalToDDMMSS_CRD(wp.lat, wp.lon); const description = wp.comment ? `${wp.identifier} | ${wp.comment.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>')}` : wp.identifier; if (index === 0 || index === waypoints.length - 1) { return `\n<POINT>\n<ID>${index + 1}</ID>\n<DATABASE_LOOKUP_STRING>FR${Math.floor(Math.random()*90000) + 10000}</DATABASE_LOOKUP_STRING>\n<DESCRIPTION>${description}</DESCRIPTION>\n<ELEVATION>\n<SOURCE>DAFIF</SOURCE>\n<VALUE>${wp.altFeet || 0}</VALUE>\n</ELEVATION>\n<INPUT_DATUM>WGE</INPUT_DATUM>\n<MAGNETIC_VARIATION>0</MAGNETIC_VARIATION>\n<NAME>${wp.identifier}/A</NAME>\n<SOURCE>AIRPORT</SOURCE>\n<WGS84_POSITION>\n<LATITUDE>${crdCoords.lat}</LATITUDE>\n<LONGITUDE>${crdCoords.lon}</LONGITUDE>\n</WGS84_POSITION>\n</POINT>`; } else { return `\n<POINT>\n<ID>${index + 1}</ID>\n<ELEVATION>\n<SOURCE>DTED</SOURCE>\n<VALUE>${wp.altFeet || 0}</VALUE>\n</ELEVATION>\n<INPUT_DATUM>WGE</INPUT_DATUM>\n<MAGNETIC_VARIATION>0</MAGNETIC_VARIATION>\n<NAME>${wp.identifier}</NAME>\n<SOURCE>USER</SOURCE>\n<WGS84_POSITION>\n<LATITUDE>${crdCoords.lat}</LATITUDE>\n<LONGITUDE>${crdCoords.lon}</LONGITUDE>\n</WGS84_POSITION>\n</POINT>`; } }).join('');
    const routePointListXML = waypoints.map((wp, index) => `\n<ROUTE_POINT>\n<ID>${100 + index}</ID>\n<POINT_REFERENCE>${index + 1}</POINT_REFERENCE>\n</ROUTE_POINT>`).join('');
    const intentListXML = waypoints.slice(0, -1).map((wp, index) => `\n<INTENT>\n<ID>${4001 + index}</ID>\n<COMMANDED_ENTRY_ROUTE_POINT_REFERENCE>${100 + index}</COMMANDED_ENTRY_ROUTE_POINT_REFERENCE>\n<WEAPONS_RELEASE_INTENT>\n<CONFIGURATION_ITEM_REFERENCE>2</CONFIGURATION_ITEM_REFERENCE>\n</WEAPONS_RELEASE_INTENT>\n<RESET_HACK_TIME_FLAG>FALSE</RESET_HACK_TIME_FLAG>\n<COMMANDED_ALTITUDE>\n<ALTITUDE>\n<ALTITUDE_TYPE>MSL</ALTITUDE_TYPE>\n<VALUE>${wp.altFeet || 25000}</VALUE>\n<ALTITUDE_RESTRICTION>NONE</ALTITUDE_RESTRICTION>\n</ALTITUDE>\n</COMMANDED_ALTITUDE>\n<COMMANDED_LEG_AIRSPEED>\n<AIRSPEED>\n<INPUT_TYPE>KTAS</INPUT_TYPE>\n<VALUE>320</VALUE>\n</AIRSPEED>\n</COMMANDED_LEG_AIRSPEED>\n<TURN_INTENT>\n<TURN_TYPE>TURN_SHORTEST</TURN_TYPE>\n<TURN_SETTING>\n<TURN_SETTING_TYPE>TURN_BANK</TURN_SETTING_TYPE>\n<VALUE>30</VALUE>\n</TURN_SETTING>\n</TURN_INTENT>\n<COMMANDED_EXIT_ROUTE_POINT_REFERENCE>${100 + index + 1}</COMMANDED_EXIT_ROUTE_POINT_REFERENCE>\n</INTENT>`).join('');
    const staticBoilerplate = `<?xml version="1.0" encoding="UTF-8"?>\n<CRD xmlns="https://metadata.ces.mil/dse/namespaces/CRD" xmlns:ism="urn:us:gov:ic:ism" xmlns:ntk="urn:us:gov:ic:ntk" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ICD_VERSION="2.1.3" ism:DESVersion="9" ism:classification="U" ism:createDate="2011-12-01" ism:ownerProducer="USA" ism:resourceElement="true" ntk:DESVersion="7" xsi:schemaLocation="https://metadata.ces.mil/dse/namespaces/CRD CRDXMLSchema.xsd">\n<MISSION_LIST>\n<MISSION>\n<ROUTE_LIST>\n<ROUTE>\n<NAME>${name}</NAME>\n<ID>1</ID>\n<RECOVERY_FUEL>10000</RECOVERY_FUEL>\n<TIME_ZONE_DESIGNATION>+0.00</TIME_ZONE_DESIGNATION>\n<VEHICLE_REFERENCE>1</VEHICLE_REFERENCE>\n<POINT_LIST>\n<!--POINT_LIST_PLACEHOLDER-->\n</POINT_LIST>\n<ROUTE_POINT_LIST>\n<!--ROUTE_POINT_LIST_PLACEHOLDER-->\n</ROUTE_POINT_LIST>\n<INTENT_LIST>\n<!--INTENT_LIST_PLACEHOLDER-->\n</INTENT_LIST>\n<PATH_LIST>\n<PATH>\n<ID>1</ID>\n<PATH_TYPE>PRIMARY</PATH_TYPE>\n<INS_XREF_POINT_REFERENCE>1</INS_XREF_POINT_REFERENCE>\n<TRANSITION_LIST>\n${waypoints.slice(0, -1).map((wp, index) => `<TRANSITION><ID>${index + 1}</ID><CALCULATION_FLAG>FALSE</CALCULATION_FLAG><INTENT_REFERENCE>${4001 + index}</INTENT_REFERENCE></TRANSITION>`).join('\n')}\n</TRANSITION_LIST>\n</PATH>\n</PATH_LIST>\n</ROUTE>\n</ROUTE_LIST>\n<VEHICLE_LIST>\n<VEHICLE>\n<ID>1</ID>\n<FPM_VERSION>4.430</FPM_VERSION>\n<FPM_VEHICLE_ID>241</FPM_VEHICLE_ID>\n<CONFIGURATION>\n<ID>1</ID>\n<TOTAL_WEIGHT>133235</TOTAL_WEIGHT>\n<STATION_LIST><CONFIGURATION_ITEM><ID>2</ID><NAME/><WEIGHT>133235</WEIGHT></CONFIGURATION_ITEM></STATION_LIST>\n</CONFIGURATION>\n</VEHICLE>\n</VEHICLE_LIST>\n<DAFIF_DATE_TIME>19800101120000</DAFIF_DATE_TIME>\n<CREATION_DATE_TIME>${new Date().toISOString().replace(/[-:.]/g,"").substring(0,14)}</CREATION_DATE_TIME>\n<MISSION_NAME>MISSION_EDITED</MISSION_NAME>\n<ID>1</ID>\n</MISSION>\n</MISSION_LIST>\n<SOURCE>JMPS</SOURCE>\n</CRD>`; return staticBoilerplate.replace('<!--POINT_LIST_PLACEHOLDER-->', pointListXML).replace('<!--ROUTE_POINT_LIST_PLACEHOLDER-->', routePointListXML).replace('<!--INTENT_LIST_PLACEHOLDER-->', intentListXML);
}